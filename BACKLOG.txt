OLX analogue project.
Need to create Spring web project for tomcat web server using
        Spring MVC, Hibernate, Postgres, Gson, JSTL

        Available ticket statuses: TODO, IN_PROGRESS, CODE_REVIEW, DONE

+DEV-001: Create maven project and add all necessary dependencies;+reznik

+DEV-002: Add hibernate support;+reznik

+DEV-003: Add spring mvc support;+reznik

+DEV-004: Create ad table with id, name, desc, pic, price, userid,
        city, phone, email, rubric columns;+reznik

+DEV-005: Create entity for ad table DEP-004;+reznik

+DEV-006: Create dao for ad table with add, getById, get, getByRubric, getByUserId, edit methods DEP-005;+reznik

+DEV-007: Create jsp main page shows ads DEP-006;+

+DEV-008: Create Main controller with get method to show main page DEP-007;+reznik

+DEV-009: Change main.jsp to work without any exceptions; +panarina

+DEV-010: Create user table with id, login, pass, city, phone, email, ads(varchar) columns; +panarina

+DEV-011: Create User entity DEP-010;+panarina

+DEV-012: Create UserDao with getByLogin, add, edit methods DEP-011;+panarina

+DEV-013: Create reg.jsp DEP-012; +panarina

+DEV-014: Create RegController with get and post methods DEP-013;+panarina

+DEV-015: Add button register on main page DEP-014; +panarina

+DEV-016: Create login.jsp DEP-012;+panarina

+DEV-017: Create LoginController with get and post methods DEP-016;+panarina

+DEV-018: Add button login on main page DEP-017;+panarina

+DEV-019: Create editUser.jsp DEP-012; +volodymyr

+DEV-020: Create EditUserController with get and post methods,
        button on main page for logined users DEP-019; +volodymyr

+DEV-021: Create addAd.jsp DEP-018;+Bogatskaya

+DEV-022: Create AddAdController with get and post methods DEP-021;+Bogatskaya

+DEV-023: Add button Add AD to main page for logined users DEP-022;+Bogatskaya

+DEV-024: Create city table script with int id, name columns and 1 Kiev, 2 Odessa
        entries inside; +panarina

+DEV-025: Add main Ukrainian cities list into city table DEP-024;+panarina

+DEV-026: Create dao method getByCity, service method, main controller logic of
        get 2 params - searchType and search, main jsp changes to search by city;+panarina

+DEV-027: Implement city select instead text input: entity, dao, service, change
          controllers, change jsps DEP-024;+panarina

+DEV-028: Create dao method getByCategory, service method, main controller logic of
        get 2 params - searchType and search, main jsp changes to search by category DEP-038;

+DEV-029: Create dao method getByName, service method, main controller logic of
         get 2 params - searchType and search, main jsp changes to search by name,
         case insensitive search by part of ad name;+panarina

+DEV-030: Add checkbox to search by description too DEP-029;+panarina

+DEV-031: Create EditAdController and editAd.jsp to edit ads and RemoveAdController to
        remove an ad;+reznik

+DEV-032: Add autofill for city, phone, email fields with user's home city;+panarina

+DEV-033: Develop messaging system: message table, entity, dao, service, jsp changes of
        editAd.jsp, handle messaging on editAd.jsp and controller DEP-031; +reznik

+DEV-034: Add column date to ad table and entity, sorting output ad collections by
        that date;+panarina

+DEV-035: Add to top function for ad owners DEP-034;+panarina

+DEV-036: Add column favorite to ad table, getByCategoryFavorite, byName and
        methods, change main.jsp and MainController to show favorites block from 3
        random favorite ad. Aware to do it in search scenario too;+panarina

+DEV-037: Create main controller logic to get param - searchType=myAds, main jsp changes
        to search user's ads;+panarina

+DEV-038: Create rubric table with int id, name columns and change where necessary text
        fields to selects;+panarina

+DEV-039: Add button GoToMainPage in ad screen;+panarina

+DEV-040: Implement disconnect user on main page using MainController get param exit=true;+panarina

 DEV-041: BUG on login page: after incorrect password entered - correct one is not worked;

+DEV-042: Do code refactor to use only specific DAO in each service, for example - UserService
        should use just UserDao;+panarina

 DEV-043: Add file uploading functionality to add ad process. It should be a button on addAd.jsp
        called 'Upload Picture' which will open 'upload file from filesystem' window and uploads a
        picture. First solution: Column picture type should be changed to 'blob' in ad table. Second
        solution: save picture on server's file system in file named by pattern: adId_DD_MM_YY;

 DEV-044: Implement users roles for security needs: Create role table with id,
        name, integer level columns, entity and dao for it. Fill that table with 3 roles: GUEST with
        level 1, ADMIN with level 8 and USER with level 3. Add column integer rolelevel to user table
        and fill all existing users with level 3. Also add functionality to set level 3 for every
        new registered users.

 DEV-045: Implement resource mapping for security needs: Create resourcemapping table with id, resource,
        method, integer level columns, entity and dao for it. Fill that table with all resources we have
        with level 3 except main page and register and login pages fill with level 1. For
        example: if we have editAd url - it means that we have editAd resource. If our logic cover functions
        show, edit and delete - it means that methods in table will be load, edit and delete. All that means
        that for editAd resource will be 3 records in resourcemapping table. Dao for this table should have
        methods getByResourceAndMethod, getByResource. Also create Resource and Method enums. Mark all
        controllers with Resource enum record as private final Resource resource.

 DEV-046: Change logic of our security from simple check is user in session to check with new SecurityService
         with method boolean hasResourceAccess(Resource resource, int level); This
         method should ask dao directly using getByResource and if level lower then ResourceMapping's
         level for requested operation - should return false. otherwise should return true. Also if user
         is not in the session - place guest user to session. For that create method createGuestUser in
         UserService. DEP-044 DEP-045

 DEV-047: Create method boolean hasAccess(Resource resource, Method Method, int level) in SecurityService. This
        method should ask dao directly using getByResourceAndMethod and if level lower then ResourceMapping's
        level for requested operation - should return false. otherwise should return true. Use new mappings created
        before to decide using new hasAccess method is user has access to, for example, edit ad
        or send message. Do it in every service where we have some changing dao requests. DEP-044 DEP-045

 DEV-048: Add styles to main and other pages;